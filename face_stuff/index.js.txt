const express = require("express");
const fs = require("fs");
const path = require("path");
const { v4: uuidv4 } = require("uuid");
const cors = require("cors");
const bodyParser = require("body-parser");
const multer = require("multer");

const app = express();
app.use(express.json());
app.use(cors());
app.use(express.json({ limit: "10mb" })); 
const upload = multer({ dest: "uploads/" });

app.post("/api/upload", upload.single("image"), (req, res) => {
    const file = req.file;
    // Process the file as needed
  
    res.status(200).json({ message: "Image uploaded successfully" });
  });

app.post("/data", (req, res) => {
    console.log("Body", req.body);


  const  image  = req.body.image;

  console.log(image);

  if (!image) {
    return res.status(400).json({ error: "No image provided" });
  }

  // Remove the data URL prefix from the base64 string
  const base64Data = image.replace(/^data:image\/jpeg;base64,/, "");

  // Generate a unique filename using the UUID package
  const filename = `${uuidv4()}.jpg`;

  // Create a file path for the new image
  const imagePath = path.join(__dirname, filename);

  // Write the base64 data to a new file
  fs.writeFile(imagePath, base64Data, "base64", (err) => {
    if (err) {
      console.error(err);
      return res.status(500).json({ error: "Failed to save the image" });
    }

    return res.status(200).json({ message: "Image saved successfully" });
  });
});

app.listen(5000, () => {
  console.log("Server is running on port 5000");
});
